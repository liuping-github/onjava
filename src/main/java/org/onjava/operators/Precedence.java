package org.onjava.operators;

/**
 * 操作符优先级
 *
 * @discussion  <a>Java操作符</a>/br<p>操作符接受一个或多个参数，然后生成一个新的值。这里参数的形式与普通方法调用里参数的形式不同，但效果是一样的。加法和一元加（+）、减法和一元减（-）、乘法（*）、除法（/）以及赋值（=）的用法与其他编程语言基本相同。
    所有操作符都是通过它们的操作数来生成新值的。另外，有些操作符还会修改操作数自身的值，这也叫作“副作用”。那些能修改操作数的操作符，其最常见的用途就是产生副作用。但要注意的是，和没有副作用的操作符一样，它们生成的值也可供你使用。
    几乎所有的操作符都只能操作基本类型。例外的是=、==和!=，它们也能操作对象（这也是对象的一个容易让人迷惑的地方）。另外，String类也支持+和+=。</p>
 */
public class Precedence {
    /**
     * 当多个操作符同时存在时，操作符的优先级决定了表达式的计算顺序。Java对计算顺序做了特别规定。最简单的规则就是先乘除后加减。程序员经常会忘记其他优先级规则，然后用括号来明确指定计算顺序。例如，下面的语句[1]和语句[2]：
     */
    public static void main(String[] args) {
        int x = 1,y=2,z=3;
        int a = x + y - 2/2 + z;
        int b = x + (y - 2)/(2 + z);
        //这两个语句看起来基本相同，但是从输出结果可以知道，由于使用了括号，它们具有迥然不同的含义。
        //需要注意的是，System.out.println()语句中使用了操作符+。在这里+意味着字符串连接，而且如果需要，它还会执行字符串转换。
        // 当编译器看到一个字符串后面紧跟着一个+和一个非String类型的元素时，它会尝试着将这个非String类型的元素转换为String类型。
        // 如同上文输出结果展示的那样，它成功地为变量a和b处理了从int到String的类型转换。
        System.out.println("a="+a);
        System.out.println("b="+b);
    }
}

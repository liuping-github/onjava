package org.onjava.operators;

import java.util.Arrays;

/**
 * 按位操作符
 * 按位操作符用来操作整数基本数据类型中的单个二进制位（bit）。
 * 按位操作符会对两个参数中对应的二进制位执行布尔代数运算，并生成一个结果。
 *
 * 按位操作符源于C语言面向底层的设计，它经常需要直接操纵硬件，并直接设置硬件寄存器内的二进制位。
 * Java最初的设计是要嵌入电视机机顶盒的，所以这种面向底层的设计是合情合理的。但现在你可能不会经常用到按位操作符。
 *
 * 如果两个输入位都是1，则按位“与”操作符（&）生成一个输出位1，否则生成一个输出位0。
 * 两个输入位里只要有一个是1，那么按位“或”操作符（|）就会生成一个输出位1；只有在两个输入位都是0的情况下，它才会生成一个输出位0。
 * 如果两个输入位里只有一个是1，那么按位“异或”操作符（^）会生成一个输出位1。
 * 按位“非 ”操作符（~）也称为取反操作符，它是一元操作符，只对一个操作数进行操作（其他按位操作符都是二元操作符）。
 * 按位“非”操作符生成与输入位相反的值——若输入位为0，则输出位为1；若输入位为1，则输出位为0。
 *
 * 按位操作符和逻辑操作符使用了相同的符号，我们可以用一个技巧来记住它们的含义：由于位是非常“小”的，所以按位操作符仅使用了一个字符。
 *
 * 按位操作符可与等号（=）联合使用，来合并运算和赋值操作：&=、|=和^=都是合法的（~是一元操作符，所以不能与等号联合使用）。
 *
 * 布尔类型作为一种单位值多少有些独特。你可以对它执行按位“与”、按位“或”和按位“异或”运算，但不能执行按位“非”（大概是为了避免与逻辑操作符!混淆）。
 * 对于布尔值，按位操作符和逻辑操作符具有相同的效果，但它们不会“短路”。此外，针对布尔值的按位运算还比逻辑操作符多了一个“异或”运算。
 * 移位表达式中不能使用布尔类型，我们会在后面解释原因。
 */
public class Bitwise {
    public static void main(String[] args) {
        //如果两个输入位都是1，则按位“与”操作符（&）生成一个输出位1，否则生成一个输出位0。
        System.out.println(1&1);
        System.out.println(0&1);
        //两个输入位里只要有一个是1，那么按位“或”操作符（|）就会生成一个输出位1；只有在两个输入位都是0的情况下，它才会生成一个输出位0。
        System.out.println(1|1);
        System.out.println(0|1);
        //如果两个输入位里只有一个是1，那么按位“异或”操作符（^）会生成一个输出位1。
        System.out.println(1^1);
        System.out.println(0^1);
        //按位“非 ”操作符（~）也称为取反操作符，它是一元操作符，只对一个操作数进行操作（其他按位操作符都是二元操作符）。
        // 按位“非”操作符生成与输入位相反的值——若输入位为0，则输出位为1；若输入位为1，则输出位为0。
        System.out.println(~-1);
        System.out.println(~1);
    }
}
/*
按位操作符和逻辑操作符使用了相同的符号，我们可以用一个技巧来记住它们的含义：由于位是非常“小”的，所以按位操作符仅使用了一个字符。
按位操作符可与等号（=）联合使用，来合并运算和赋值操作：&=、|=和^=都是合法的（~是一元操作符，所以不能与等号联合使用）。
布尔类型作为一种单位值多少有些独特。你可以对它执行按位“与”、按位“或”和按位“异或”运算，但不能执行按位“非”（大概是为了避免与逻辑操作符!混淆）。
对于布尔值，按位操作符和逻辑操作符具有相同的效果，但它们不会“短路”。此外，针对布尔值的按位运算还比逻辑操作符多了一个“异或”运算。
移位表达式中不能使用布尔类型，我们会在后面解释原因。
 */
